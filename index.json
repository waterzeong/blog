[{"content":"\n![InkPaper \u0026 Travis CI](/blog/images/ink-with-travis-ci.png)\n## Introduction\nInkPaper is an static blog generator developed by Golang, No dependencies, Cross platform, Easy use, Fast build, Elegant theme. New to [InkPaper](http://www.chole.io/)? With Travis CI can solve the problem of automatic build and deployment, so that we can focus more on writing.\n\n## What is Travis CI?\n[Travis CI](https://travis-ci.org/) is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub. This means that you'd better host your static blog on [GitHub Pages](https://help.github.com/articles/what-is-github-pages/). When Travis CI has been activated for GitHub Pages repository, GitHub will notify it whenever new commits are pushed to that repository. It can also be configured to only run for specific branches, or branches whose names match a specific pattern. Travis CI will then check out the relevant branch and run the commands specified in [.travis.yml](https://github.com/shery15/blog/blob/blog-source/.travis.yml), which usually build the software and run any automated tests, in this post we will use Travis CI to run `ink build` and push to `GitHub Pages` branch. When that process has completed, Travis notifies the developer(s) in the way it has been configured to do so.\n\n## Configuration\nBefore starting, make sure that your static blog repository has two branches, one for `ink blog source` files, and the other for `GitHub Pages` files. For example, I created a branch named `blog-source` to store my `ink blog source` files, and a branch named `master` to host `GitHub Pages` files.\n\n1. [Sign in to Travis CI](https://travis-ci.org/auth) with your GitHub account.\n2. Once you’re signed in, go to your profile page and enable Travis CI for the repository you want to build.\n![step 1: add the blog repository](/blog/images/step1.png)\n![step 2: Flick the blog repository switch on](/blog/images/step2.png)\n![step 3: configure the blog repository](/blog/images/step3.png)\n![step 4: Open this two configuration](/blog/images/step4.png)\n3. Add the `Github Access Token` to your repository in Travis CI, which can be used to access the GitHub API. Thus, Travis CI can push the files which are generated by InkPaper to GitHub Pages branch.\n![step 5: Generate Github Personal access token](/blog/images/step5.png)\n![step 6: Add Github Personal access token to your repository in Travis CI](/blog/images/step6.png)\n4. Add a `.travis.yml` file to your repository to tell Travis CI what to build.\n![step 7: configure .travis.yml](/blog/images/step7.png)\n![step 8: output directory](/blog/images/step8.png)\n5. Add the `.travis.yml` file to git, commit and push, to trigger a Travis CI build.\n\n## Now\nWhen we complete a post, and then push it to Github, Travis CI wil do the rest things\n. All we need to do is focus on writing.\n\n\u003e You can find all the code mentioned in the repository: [https://github.com/shery15/blog](https://github.com/shery15/blog)\n","cover":"/blog/images/ink-with-travis-ci.png","link":"travis-ci.html","preview":"\u003cp\u003eInkPaper is an static blog generator, With Travis CI can solve the problem of automatic build and deployment, so that we can focus more on writing.\u003c/p\u003e\n","title":"Automatically deploy your Ink blog to GitHub pages wiht Travis CI"},{"content":"\n对于 Web 开发者来说很有用的 Atom 插件！刚接触 [Atom](https://atom.io/) ?\n\n## 语法支持\n* language-babel\n\n```\nES2016、ESNext、JSX 语法扩展\n```\n* language-postcss\n\n```\nPostCSS 语法高亮\n```\n\n## 自动补全\n* autocomplete-modules\n\n```\n模块名自动补全\n```\n* autocomplete-paths\n\n```\n路径自动补全\n```\n* atom-ternjs\n\n```\nES5, ES6, ES7, Node.js, jQuery, Angular 等等 js 代码自动补全\n```\n* emmet\n\n```\n快速手写 HTML, CSS, Sass / SCSS / LESS\n```\n\n## 语法检查\n* linter\n\n```\n基本语法检查框架\n```\n* linter-jshint\n\n```\n基于 jshint 的 JavaScript 语法检查插件\n```\n* linter-eslint\n\n```\n基于 ESLint 的 JavaScript 语法检查插件\n```\n\n## 版本控制\n* git-plus\n\n```\n丢掉终端，在 Atom 里面执行 Git 命令\n```\n* merge-conflicts\n\n```\n通过 Atom 处理冲突的文件\n```\n\n## 扩展功能\n* minimap\n\n```\n源码预览图\n```\n* file-icons\n\n```\n显示文件类型对应的图标\n```\n* atom-beautify\n\n```\n代码格式化\n```\n* pigments\n\n```\n代码颜色可视化\n```\n* color-picker\n\n```\n取色器\n```\n* highlight-selected\n\n```\n高亮选中\n```\n* minimap-highlight-selected\n\n```\n源码预览图中高亮选中\n```\n* docblockr\n\n```\n注释插件\n```\n* markdown-preview-plus\n\n```\nmarkdown 实时预览\n```\n* hyperclick\n\n```\n跳转到变量定义文件，需要配合 js-hyperclick 使用\n```\n* js-hyperclick\n\n```\n跳转到变量定义文件，需要配合 hyperclick 使用\n```\n* travis-ci-status\n\n```\n底部状态栏扩展\n```\n","cover":"","link":"awesome-atom-packages-zh.html","preview":"\u003cp\u003e这是一个适用于 Web 开发者的 Atom 插件列表。 有了这些插件帮助， Atom 可以为我们提供类似 IDE 的功能.\u003c/p\u003e\n","title":"一些适用于前端开发的 Atom 插件"},{"content":"\nSome Useful Atom Packages for Web Developers ! New to [Atom](https://atom.io/)?\n\n## Syntax Support\n* language-babel\n\n```\nLanguage grammar for all versions of JavaScript including ES2016 and ESNext, JSX\n```\n* language-postcss\n\n```\nSyntax highlighting for PostCSS\n```\n\n## Autocomplete\n* autocomplete-modules\n\n```\nAutocomplete for require/import statements\n```\n* autocomplete-paths\n\n```\nAdds path autocompletion to autocomplete-plus\n```\n* atom-ternjs\n\n```\nAutocomplete for ES5, ES6, ES7, Node.js, jQuery, Angular and more\n```\n* emmet\n\n```\nAllow you to work quickly when writing HTML, CSS, Sass / SCSS and LESS syntaxes\n```\n\n## Syntax Checking\n* linter\n\n```\nA Base Linter with Cow Powers\n```\n* linter-jshint\n\n```\nLinter plugin for JavaScript, using jshint\n```\n* linter-eslint\n\n```\nLint JavaScript on the fly, using ESLint\n```\n\n## Version Control\n* git-plus\n\n```\nDo git things without the terminal\n```\n* merge-conflicts\n\n```\nResolve git conflicts within Atom\n```\n\n## Extension\n* minimap\n\n```\nA preview of the full source code\n```\n* file-icons\n\n```\nAssign file extension icons and colours for improved visual grepping\n```\n* atom-beautify\n\n```\nBeautify HTML, CSS, JavaScript, and more in Atom\n```\n* pigments\n\n```\nA package to display colors in project and files\n```\n* color-picker\n\n```\nA Color Picker for Atom\n```\n* highlight-selected\n\n```\nHighlights the current word selected when double clicking\n```\n* minimap-highlight-selected\n\n```\nA minimap binding for the highlight-selected package\n```\n* docblockr\n\n```\nA helper package for writing documentation\n```\n* markdown-preview-plus\n\n```\nA real-time preview for markdown documents\n```\n* hyperclick\n\n```\nPluggable text-clicking UI for Atom\n```\n* js-hyperclick\n\n```\nA hyperclick provider that lets you jump to where variables are defined\n```\n* travis-ci-status\n\n```\nAdd Travis CI status of the project to the Atom status bar\n```\n","cover":"","link":"awesome-atom-packages.html","preview":"\u003cp\u003eHere\u0026rsquo;s a list of several atom-packages for Web developers. With these atom-packages , atom will provide IDE-like functionality.\u003c/p\u003e\n","title":"Awesome Atom Packages"},{"content":"\n比方说，你想要在自己网站上分享一个产品，或者是一个作品集，又或者仅仅只是一个灵感。在你发布到网上之前，你想让它看起来有吸引力，专业，或者至少得看起来像那么回事。\n\n那么你接下来该做什么呢？\n\n## 文本\n\n设计的目的是为了增强它所应用到的内容的表现形式。这看上去是显而易见的事，但内容是一个网站的主要元素，它不应该在发布后才想到要调整。\n编写的内容，就像你目前正在阅读的文章，组成了超过90%的网页。为这个文本内容添加样式将有一个很长的路要走。\n让我们假设你已经完成了你想发布的内容，同时已经创建了一个空的`style.css`文件，什么是你可以写的第一条规则？\n\n## 居中\n\n长文本很难解析，也因此不易阅读。每行设置字符限制，可以大大提高大量文本的可读性和吸引力。\n```\nbody {\n  margin: 0 auto;\n  max-width: 50em;\n}\n```\n在为文本容器添加了样式后，为文本本身添加样式可好？\n\n## 字体\n\n浏览器的默认字体为`Times`，可看起来缺乏吸引力（主要是因为它是“无样式”字体）。切换到一个无衬线字体，如`Helvetica`或`Arial`可以大大提高你网页的可读性。\n```\nbody {\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n```\n如果你坚持要用衬线体，可以试试`Georgia`。\n当我们让文本更具吸引力时，也需要让它更具可读性。\n\n## 间隔\n\n当用户觉得一个页面`崩坏`的时候，通常来说都是`间距`问题。通过在文本周围和文本内设置适当的间距就可以增加页面的吸引力。\n```\nbody {\n  line-height: 1.5;\n  padding: 4em 1em;\n}\n\nh2 {\n  margin-top: 1em;\n  padding-top: 1em;\n}\n```\n虽然到目前为止布局已经大大改善，但让我们添加更多细节处理。\n\n## 颜色和对比度\n\n白色背景上的黑色文字看起来会比较扎眼。为文本选择一款较软一点的黑色，让页面阅读起来更舒服。\n```\nbody {\n  color: #555;\n}\n```\n为了保持一个良好的`对比度`，让我们为`重要`文本选择一个更黑暗的阴影。\n```\nh1,\nh2,\nstrong {\n  color: #333;\n}\n```\n虽然大部分页面在视觉上已经有所提升，但是一些元素依然显得格格不入，如代码段。\n\n## 平衡\n\n只需要一些额外的调整就可以平衡页面：\n```\ncode,\npre {\n  background: #eee;\n}\n\ncode {\n  padding: 2px 4px;\n  vertical-align: text-bottom;\n}\n\npre {\n  padding: 1em;\n}\n```\n在这一点上，你可能想让你的页面脱颖而出，让它更有个性。\n\n## 主色调\n\n大多数品牌都有一个`主色调`，作为视觉基调。在一个网页上，这个主色调可以用来强调交互元素，如`链接`。\n```\na {\n  color: #e81c4f;\n}\n```\n但是为了保持平衡/协调，我们还需要一些额外的颜色。\n\n## 辅助色\n\n主色调可以用更微妙的色调来补充，用于边框，背景，甚至正文中。\n```\nbody {\n  color: #566b78;\n}\n\ncode,\npre {\n  background: #f5f7f9;\n  border-bottom: 1px solid #d8dee9;\n  color: #a7adba;\n}\n\npre {\n  border-left: 2px solid #69c;\n}\n```\n已经改变了色调，为什么不一并改变外形/字体...\n\n## 自定义字体\n\n由于文本是网页的主要内容，使用`自定义字体`能使页面更加引人注目。\n当你可以嵌入自己的网页字体或使用类似[Typekit](https://typekit.com/)的在线服务时，让我们使用免费[谷歌字体](https://fonts.google.com/)`Roboto`：\n```\n@import 'https://fonts.googleapis.com/css?family=Roboto:300,400,500';\n\nbody {\n  font-family: \"Roboto\", \"Helvetica\", \"Arial\", sans-serif;\n}\n```\n在通过自定义字体凸显你的个性后，想让页面更加丰富多彩又怎么办呢？\n\n![Spongebob rainbow meme saying 'Images'](https://raw.githubusercontent.com/jgthms/web-design-in-4-minutes/master/images.png)\n\n图片和图标既可用来作为支持你的内容的装饰品，还可以在你想要传达的信息中担当积极部分。\n\n让我们从[Unsplash](https://unsplash.com/photos/qH36EgNjPJY)挑选一张漂亮的背景图片来美化`header`。\n```\nheader {\n  background-color: #263d36;\n  background-image: url(\"header.jpg\");\n  background-position: center top;\n  background-repeat: no-repeat;\n  background-size: cover;\n  line-height: 1.2;\n  padding: 10vw 2em;\n  text-align: center;\n}\n```\n添加`logo`\n```\nheader img {\n  display: inline-block;\n  height: 120px;\n  vertical-align: top;\n  width: 120px;\n}\n```\n让我们借这个机会，来提高文本格调。\n```\nheader h1 {\n  color: white;\n  font-size: 2.5em;\n  font-weight: 300;\n}\n\nheader a {\n  border: 1px solid #e81c4f;\n  border-radius: 290486px;\n  color: white;\n  font-size: 0.6em;\n  letter-spacing: 0.2em;\n  padding: 1em 2em;\n  text-transform: uppercase;\n  text-decoration: none;\n  transition: none 200ms ease-out;\n  transition-property: color, background;\n}\n\nheader a:hover {\n  background:  #e81c4f;\n  color: white;\n}\n```\n[瞧！](#)\n\n按照网页设计的基本原则，我们在短短几分钟内设计了一个像样的页面。只剩下最后一件事啦...\n\n## 分享爱！\n\n[**GitHub**下载链接](https://github.com/jgthms/web-design-in-4-minutes)\n\n[**Facebook**分享链接](http://www.facebook.com/sharer.php?u=http%3A%2F%2Fjgthms.com%2Fweb-design-in-4-minutes%2F)\n\n[**Twitter**分享链接](https://twitter.com/intent/tweet?text=Web%20Design%20in%204%20minutes\u0026url=http%3A%2F%2Fjgthms.com%2Fweb-design-in-4-minutes%2F\u0026via=jgthms)\n\n\n如果你想学习更过网页设计, 查看 [**MarkSheet**](http://marksheet.io/), 我的免费 HTML 和 CSS 指南.\n又或者你想马上开始尝试网页设计, 试试 [**Bulma**](http://bulma.io/), 这是我基于Flexbox的 CSS 框架.\n\n## 总结 - Web Design in 4 minutes\n\n这篇文章介绍了基本的网页设计过程和设计原则，一步步分解过程，让刚开始接触网页设计的人，也可以很快找到感觉，希望这篇文章能在你刚接触网页设计不知所措的时，给到你些帮助。\n\n感谢阅读！\n\n\u003e 本文译自2016年的[《Web Design in 4 minutes》 - Jeremy Thomas](http://jgthms.com/web-design-in-4-minutes/)，第一次翻译，同时对原文有理解性改动，水平有限，欢迎提出意见。\n","cover":"/blog/images/web-design-in-4-minutes.png","link":"web-design-in-4-minutes.html","preview":"\u003cp\u003e比方说，你想要在自己网站上分享一个产品，或者是一个作品集，又或者仅仅只是一个灵感。在你发布到网上之前，你想让它看起来有吸引力，专业，或者至少得看起来像那么回事。那么你接下来该做什么呢？\u003c/p\u003e\n","title":"4分钟学会网页样式[译]"},{"content":"\n## Manjaro简介\nManjaro Linux 是面向桌面的、用户友好的、基于 Arch Linux 的发行版。它的一些显著特性包括：一份直观的安装程序、自动硬件检测、用于管理图形卡的特别 Bash 脚本、一组额外的桌面配置选项。 Manjaro Linux 带有三份样式，分别采用 Xfce、GNOME 3（使用Cinnamon Shell）、KDE 桌面。\n![Manjaro](/blog/images/manjaro-gnome.jpg)\n\n## 写在前面\n在尝试安装 Arch 之后才接触到的 Manjaro ，相比之下 Manjaro 安装简单，只需要少量配置，即可使用，降低了初学者的入门门槛，让过渡更加平缓。分享一下自己的安装过程，给刚从 Windows 过渡来的小伙伴一些参考。\n\n## 启动盘\n* 下载ISO,[官网传送门](http://manjaro.github.io/download/)，页面底部有torrents链接。\n* 启动盘制作工具：[Image Writer](https://launchpad.net/win32-image-writer/)，[其他工具传送门](https://wiki.manjaro.org/index.php?title=Burn_an_ISO_File)。\n\n## 安装\n* 进入boot直接选择之前制作好的安装介质启动。\n* 建议启动安装后选择第二项闭源驱动，Manjaro 会帮你安装好基本驱动，十分省事。\n* 剩下的就是点点点...\n\n## 额外配置\n### 添加`archlinuxCN`源\n```\nsudo nano /etc/pacman.conf\n在文件底部加入如下几行\n[archlinuxcn]\nSigLevel = Optional TrustedOnly\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n```\n### 安装`中文`输入法\n以安装`搜狗`为例\n```\nsudo pacman -S fcitx-sogoupinyin\nsudo pacman -S fcitx-im\nsudo pacman -S fcitx-configtool\n```\n设置中文输入法`环境变量`，否则中文输入法无法启动\n```\nsudo nano ~/.xprofile\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=\"@im=fcitx\"\n```\n保存成功后，在终端输入`fcitx`启动服务\n### 开发环境\n经过以上基本设置，Manjaro 即可达到可用的状态，接着可以根据自己的需要构建开发环境，通过`pacman`安装应用非常方便，一条命令即可完成。\n\n推荐一些自己用到的前端开发工具\n\n* chrome\n* atom\n* git\n* nodejs\n* npm\n\n最后推荐一款主题 [arc-theme](https://github.com/horst3180/Arc-theme)，一款漂亮的扁平化主题。\n\n## 总结\nManjaro 的安装过程非常简单，同时也是基于 Arch Linux 的一个相对完整的发行版，有较好的稳定性、易用、人性化，就像其官网宣传的能达到开机即用的自由操作系统，这也为想要体验自由系统的用户提供了另一种途径，让更多用户可以更平缓的进入自由系统的世界，Enjoy Manjaro!\n","cover":"/blog/images/manjaro-gnome.jpg","link":"manjaro.html","preview":"\u003cp\u003eManjaro Linux是面向桌面的、用户友好的、基于Arch Linux的发行版。它的一些显著特性包括：一份直观的安装程序、自动硬件检测、用于管理图形卡的特别Bash脚本、一组额外的桌面配置选项。 Manjaro Linux带有三份样式，分别采用Xfce、GNOME 3（使用Cinnamon Shell）、KDE桌面。\u003c/p\u003e\n","title":"Enjoy Manjaro"},{"content":"\n## 个人信息\n  - 许锐/男/1990\n  - 本科/西南科技大学/信息安全\n  - 工作时间：3年\n  - 博客：http://www.shery.me/blog/\n  - Github：https://github.com/shery15\n  - 职位：Web前端工程师\n  - 城市：成都\n\n## 联系方式\n  - 邮箱：npcoci@gmail.com\n\n## 项目经验\n  - 2017\n    诗神摇摇\n    UI\u0026前端开发\n\n    独立负责设计微信版UI界面，以及原生应用功能H5化。\n    根据应用特色选择适合其风格的主题方案，优化交互流程，降低用户学习成本；使用webpack进行模块化构建（前端资源模块化管理和打包），新增图书阅读进度恢复，进度记录，文本缓存，图片合成等功能。\n    全新的用户界面，流畅的交互，给甲方带来了超出预期的结果。\n\n    技术栈： ES6+, React，Handlebars.js, jQuery, PostCSS, Babel, Webpack, Lodash。\n\n  - 2016\n    cc招车系统\n    前端开发\u0026项目经理\u0026产品经理（兼职）\n\n    独立负责cc招车系统SaaS化任务分配，项目实施，质量跟踪，项目验收及客户端SPA和cc招车管理系统（后台）的开发。\n    主导cc招车系统SaaS化产品设计，使用Tower细分任务，逐一跟踪，把控项目进度，规范测试流程，根据优先级程度处理测试过程中发现的问题；客户端SPA使用flex+rem布局方案，从而实现自适应页面，使用Highcharts进行数据呈现（数据可视化），引入高德Web SDK进行数据呈现与交互，设计开发计费系统与支付环节，利用Web存储缓存非敏感信息，优化性能，使用Gulp进行前端自动化构建（压缩、合并代码等），提升开发效率。\n    项目如期完成，上线运营。\n\n    技术栈： ES5, Handlebars.js, Highcharts, Flex, Bootstrap, Gulp, jQuery, Underscore。\n\n  - 2016\n    广电商城\n    前端开发\n\n    对广电系电子商城进行二次开发。\n    独立负责移动商城重构，优化交互逻辑，利用Ajax动态获取商品信息、更新商品、无限加载；利用flex+rem布局方案进行多终端适配优化，使用Highcharts进行数据呈现（数据可视化），使用Gulp进行前端自动化构建（压缩、合并代码等），提升开发效率。\n    项目如期交付。\n\n    技术栈： ES5, Highcharts, Flex, Bootstrap, Gulp, jQuery。\n\n  - 2015\n    幕川府微信商城\n    前端开发\n\n    开发与有物商城（顺丰旗下电子商城）类似的微信商城。\n    独立负责微信商城，电商后台的前端开发，深度挖掘客户需求，通过视频进行商品展示（优酷云），利用flex+rem布局方案进行多终端适配优化，开发中注重微交互，提升用户体验，使用Gulp进行前端自动化构建（压缩、合并代码等），提升开发效率。\n    交互流畅，用户体验良好，超出甲方预期。\n\n    技术栈： ES5, Highcharts, Flex, SUI, Gulp, jQuery。\n\n## 专业技能\n  - HTML/CSS/JS\n  - HTML5/CSS3\n  - ES6+/React/Redux\n  - Webpack/Gulp\n  - Nodejs\n  - Ps\n\n## 自我评价\n  - 了解客户需求，关注前端生态，喜欢视觉与逻辑的综合体。有良好的沟通能力，与人相处友善，对待工作专心负责。关注开源项目，不断自我提升，努力成为一名更加优秀的前端工程师。\n\n## 业余经历\n  - Github: https://github.com/shery15\n  - InkPaper: 静态博客构建工具，http://www.chole.io/\n  - BLOG: http://www.shery.me/blog/\n  - Awesome Atom Packages: https://github.com/shery15/awesome-atom-packages\n  - Ink Theme Dark: https://github.com/InkProject/ink-theme-dark\n","cover":"","link":"cv.html","preview":"\u003cp\u003eShery\u0026rsquo;s Resume as Web Front-End Developer.\u003c/p\u003e\n","title":"Resume"},{"content":"\n\n## 纸小墨简介\n\n纸小墨（InkPaper）是一个GO语言编写的开源静态博客构建工具，可以快速搭建博客网站。它无依赖跨平台，配置简单构建快速，注重简洁易用与更优雅的排版。\n\n![纸小墨 - 简洁的静态博客构建工具](/blog/images/example.png)\n\n### 开始上手\n\n- 下载并解压 [Ink](http://www.chole.io/)，运行命令 `ink preview`\n\n  \u003e 注意：Linux/macOS下，使用 `./ink preview`\n\n- 使用浏览器访问 `http://localhost:8000` 预览。\n\n### 特性介绍\n- YAML格式的配置\n- Markdown格式的文章\n- 无依赖跨平台\n- 超快的构建速度\n- 不断改善的主题与排版\n- 多文章作者支持\n- 归档与标签自动生成\n- 保存时实时预览页面\n- 离线的全文关键字搜索\n\n### 配置网站\n编辑`config.yml`，使用如下格式：\n\n``` yaml\nsite:\n    title: 网站标题\n    subtitle: 网站子标题\n    limit: 每页可显示的文章数目\n    theme: 网站主题目录\n    comment: 评论插件变量(默认为Disqus账户名)\n    root: 网站根路径 #可选\n    lang: 网站语言 #支持en, zh, ru, ja，可在theme/config.yml配置\n    url: 网站链接 #用于RSS生成\n    link: 文章链接形式 #默认为{title}.html，支持{year},{month},{day},{title}变量\n\nauthors:\n    作者ID:\n        name: 作者名称\n        intro: 作者简介\n        avatar: 作者头像路径\n\nbuild:\n    output: 构建输出目录 #可选, 默认为 \"public\"\n    port: 预览端口\n    copy:\n        - 构建时将会复制的目录/文件\n    publish: |\n        ink publish 命令将会执行的脚本\n```\n\n### 创建文章\n在`source`目录中建立任意`.md`文件（可置于子文件夹），使用如下格式：\n\n``` yaml\ntitle: 文章标题\ndate: 年-月-日 时:分:秒 #创建时间，可加时区如\" +0800\"\nupdate: 年-月-日 时:分:秒 #更新时间，可选，可加时区如\" +0800\"\nauthor: 作者ID\ncover: 题图链接 #可选\ndraft: false #草稿，可选\ntop: false #置顶文章，可选\npreview: 文章预览，也可在正文中使用\u003c!--more--\u003e分割 #可选\ntags: #可选\n    - 标签1\n    - 标签2\ntype: post #指定类型为文章(post)或页面(page)，可选\n\n---\n\nMarkdown格式的正文\n```\n\n### 发布博客\n- 在博客目录下运行`ink publish`命令自动构建博客并发布。\n- 或运行`ink build`命令将生成的`public`目录下的内容手动部署。\n\n\u003e Tips: 在使用`ink preview`命令时，编辑保存文件后，博客会自动重新构建并刷新浏览器页面。\n\n## 定制支持\n\n### 修改主题\n\n默认主题在`theme`目录下，修改源代码后在该目录下运行`npm install`与`webpack`重新构建。\n\n页面包含`page.html`（文章列表）及`article.html`（文章）等，所有页面均支持[GO语言HTML模板](http://golang.org/pkg/html/template/)语法，可引用变量。\n\n### 添加页面\n\n在`source`目录下创建的任意`.html`文件将被复制，这些文件中可引用`config.yml`中site字段下的所有变量。\n\n### 博客迁移(Beta)\n\n纸小墨提供简单的Jeklly/Hexo博客文章格式转换，使用命令：\n``` shell\nink convert /path/_posts\n```\n\n### 源码编译\n\n本地运行\n\n1. 配置[GO](http://golang.org/doc/install)语言环境。\n2. 运行命令`go get github.com/InkProject/ink`，编译并获取ink。\n3. 运行命令`ink preview $GOPATH/src/github.com/InkProject/ink/template`，预览博客。\n\nDocker构建（示例）\n\n1. Clone源码 `git clone git@github.com:InkProject/ink.git`。\n2. 源码目录下构建镜像`docker build -t ink .`。\n3. 运行容器`docker run -p 8000:80 ink`。\n\n## 三方主题\n\n- Pure: [https://github.com/Xdatk/ink-pure](https://github.com/Xdatk/ink-pure)\n- Werttin: [https://github.com/Skimige/ink_Werttin](https://github.com/Skimige/ink_Werttin)\n\n## 反馈贡献\n\n纸小墨基于 [CC Attribution-NonCommercial License 4.0](https://creativecommons.org/licenses/by-nc/4.0/) 协议，目前为止它仍然是个非成熟的开源项目，非常欢迎任何人的任何贡献。如有问题可报告至 [https://github.com/InkProject/ink/issues](https://github.com/InkProject/ink/issues)。\n\n## 更新历史\n\n- [2016-07-11] 修复诸多Issue与合并一些PR。\n- [2015-08-15] 一些Bug修复，新增RSS订阅支持，主题改善。\n- [2015-07-04] 数项Bug修复与主题改善，支持置顶，多语言，子模板。\n- [2015-06-04] 编译更多平台版本，增加标签与存档页。\n- [2015-03-01] Beta版本，基础功能完成。\n\n## 更新计划\n\n- 排版深度优化\n- 纸小墨编辑器\n\n## 正在使用\n\n- [http://www.chole.io/blog/](http://www.chole.io/blog/)\n- [http://blog.hyper.sh/](http://blog.hyper.sh/)\n- [http://wangxu.me/](http://wangxu.me/)\n- [http://whzecomjm.com/](http://whzecomjm.com/)\n- [http://www.shery.me/blog/](http://www.shery.me/blog/)\n","cover":"/blog/images/example.png","link":"ink-blog-tool.html","preview":"\u003cp\u003e纸小墨（InkPaper）是一个GO语言编写的开源静态博客构建工具，可以快速搭建博客网站。它无依赖跨平台，配置简单构建快速，注重简洁易用与更优雅的排版。\u003c/p\u003e\n","title":"简洁的静态博客构建工具 —— 纸小墨（InkPaper）"},{"content":"\n\n## Introduce\n\nInkPaper is an static blog generator developed by Golang, No dependencies, Cross platform, Easy use, Fast build, Elegant theme.\n\n![InkPaper - An Elegant Static Blog Generator](/blog/images/example-en.png)\n\n### Quick Start\n- Download \u0026 Extract [Ink](http://www.chole.io/)，Run `ink preview`\n\n  \u003e Tips：Linux/macOS, use `./ink preview`\n\n- Open `http://localhost:8000` in browser to preview\n\n### Website Configuration\nEdit `config.yml`, use format:\n\n``` yaml\nsite:\n    title: Website Title\n    subtitle: Website Subtitle\n    limit: Max Article Count Per Page\n    theme: Website Theme Directory\n    comment: Comment Plugin Variable (Default is disqus username)\n    root: Website Root Path #Optional\n    lang: Website Language #Support en, zh, ru, ja, Configurable in theme/lang.yml\n    url: Website URL #For RSS Generating\n    link: Article Link Scheme #Default Is {title}.html，Support {year},{month},{day},{title} Variables\n\nauthors:\n    AuthorID:\n        name: Author Name\n        intro: Author Motto\n        avatar: Author Avatar Path\n\nbuild:\n    output: Build Output Directory #Optional, Default is \"public\"\n    port: Preview Port\n    copy:\n        - Copied Files When Build\n    publish: |\n        Excuted command when use 'ink publish'\n```\n\n### Writing\nCreate any `.md` file in `source` directory (Support subdirectory), use format:\n\n``` yaml\ntitle: Article Title\ndate: Year-Month-Day Hour:Minute:Second #Created Time，Support TimeZone, such as \" +0800\"\nupdate: Year-Month-Day Hour:Minute:Second #Updated Time，Optional，Support TimeZone, such as \" +0800\"\nauthor: AuthorID\ncover: Article Cover Path #Optional\ndraft: false #If Draft，Optional\ntop: false #Place article to top, Optional\npreview: Article Preview，Also use \u003c!--more--\u003e to split in body #Optional\ntags: #Optional\n    - Tag1\n    - Tag2\ntype: post #Specify type is post or page, Optional\n\n---\n\nMarkdown Format's Body\n```\n\n### Publish\n- Run `ink publish` in blog directory to automatically build and publish\n- Or run `ink build` to manually deploy generated `public` directory\n\n\u003e **Tips**: When files changed，`ink preview` will automatically rebuild blog，refresh browser to update.\n\n## Customization\n\n### Modify Theme\n\nDefault theme placed in `theme` folder, run `npm install` and `webpack` to rebuild in this folder.\n\npage `page.html` (article list) and `article.html` (article), use variable with [Golang Template](http://golang.org/pkg/html/template/) syntax.\n\n### New Page\n\nCreated any `.html` file will be copied to `source` directory, could use all variables on `site` field in `config.yml`.\n\n### Blog Migrate (Beta)\n\nSupport simple Jeklly/Hexo post convert, use:\n\n``` shell\nink convert /path/_posts\n```\n\n### Build from source\n\nLocal Build\n\n1. Install [Golang](http://golang.org/doc/install) environment\n2. Run `go get github.com/InkProject/ink`, compile and get ink\n3. Run `ink preview $GOPATH/src/github.com/InkProject/ink/template`, preview blog\n\nDocker Build (Example)\n\n1. Clone code `git clone git@github.com:InkProject/ink.git`\n2. Build image `docker build -t ink .` in source directory\n3. Run container `docker run -p 8888:80 ink`\n\n## Theme\n\n- Pure: [https://github.com/Xdatk/ink-pure](https://github.com/Xdatk/ink-pure)\n- Werttin: [https://github.com/Skimige/ink_Werttin](https://github.com/Skimige/ink_Werttin)\n\n## Issue Report\n\n[CC Attribution-NonCommercial License 4.0](https://creativecommons.org/licenses/by-nc/4.0/)\n\n[https://github.com/InkProject/ink/issues](https://github.com/InkProject/ink/issues)\n\n## Change Log\n\n- [2016-07-11] Fix bugs and merge many PRs\n- [2015-08-15] Bug fix, support RSS feed, improve theme\n- [2015-07-04] Bug fix, improve theme, support top, i18n, subtemplate\n- [2015-06-04] Build more platform, add archive and tag page\n- [2015-03-01] Release first beta version\n\n## Develop Plan\n\n- Improve Theme\n- InkPaper Editor\n\n## They are using\n\n- [http://www.chole.io/blog/](http://www.chole.io/blog/)\n- [http://blog.hyper.sh/](http://blog.hyper.sh/)\n- [http://wangxu.me/](http://wangxu.me/)\n- [http://whzecomjm.com/](http://whzecomjm.com/)\n- [http://www.shery.me/blog/](http://www.shery.me/blog/)\n","cover":"/blog/images/example-en.png","link":"ink-blog-tool-en.html","preview":"\u003cp\u003eInkPaper is an static blog generator developed by Golang, No dependencies, Cross platform, Easy use, Fast build, Elegant theme.\u003c/p\u003e\n","title":"An Elegant Static Blog Generator —— InkPaper"},{"content":"\n## Hello InkPaper\n这是使用纸小墨（InkPaper）快速构建的第一篇Blog。\n\nEnjoy InkPaper,Enjoy the simplicity!\n## 纸小墨简介\n\n纸小墨（InkPaper）是一个GO语言编写的开源静态博客构建工具，可以快速搭建博客网站。它无依赖跨平台，配置简单构建快速，注重简洁易用与更优雅的排版。\n\n![纸小墨 - 简洁的静态博客构建工具](/blog/images/example.png)\n","cover":"/blog/images/example.png","link":"hello.html","preview":"\u003cp\u003e纸小墨（InkPaper）是一个GO语言编写的开源静态博客构建工具，可以快速搭建博客网站。它无依赖跨平台，配置简单构建快速，注重简洁易用与更优雅的排版。\u003c/p\u003e\n","title":"Hello InkPaper"}]